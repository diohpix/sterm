warning: sterm@0.1.0: Exported component 'TabBar' doesn't inherit Window. No code will be generated for it
warning: sterm@0.1.0:    --> /Users/xiphoid/git/sterm/ui/main_window.slint:18:18
warning: sterm@0.1.0:     |
warning: sterm@0.1.0: 18  | export component TabBar inherits Rectangle {
warning: sterm@0.1.0:     |                  ^
warning: sterm@0.1.0: Exported component 'TerminalView' doesn't inherit Window. No code will be generated for it
warning: sterm@0.1.0:    --> /Users/xiphoid/git/sterm/ui/main_window.slint:117:18
warning: sterm@0.1.0:     |
warning: sterm@0.1.0: 117 | export component TerminalView inherits Rectangle {
warning: sterm@0.1.0:     |                  ^
warning: unused imports: `Column` and `Line`
 --> src/terminal/mod.rs:5:13
  |
5 |     index::{Column, Line, Point},
  |             ^^^^^^  ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `color::*`
 --> src/utils/mod.rs:9:9
  |
9 | pub use color::*;
  |         ^^^^^^^^

warning: unused import: `font::*`
  --> src/utils/mod.rs:10:9
   |
10 | pub use font::*;
   |         ^^^^^^^

warning: unused import: `platform::*`
  --> src/utils/mod.rs:11:9
   |
11 | pub use platform::*;
   |         ^^^^^^^^^^^

warning: unused variable: `window`
   --> src/ui/mod.rs:284:45
    |
284 | ...                   if let Some(window) = window_weak.upgrade() {
    |                                   ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `window`
   --> src/ui/mod.rs:383:37
    |
383 |                         if let Some(window) = window_weak.upgrade() {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: variable does not need to be mutable
   --> src/ui/mod.rs:455:37
    |
455 | ...                   let mut tm = terminal_manager.lock().await;
    |                           ----^^
    |                           |
    |                           help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `window_weak`
   --> src/ui/mod.rs:617:17
    |
617 |             let window_weak = window_weak.clone();
    |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_window_weak`

warning: unused variable: `content`
   --> src/ui/mod.rs:616:73
    |
616 |         tm.set_ui_update_callback(Box::new(move |session_id: SessionId, content: String| {
    |                                                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_content`

warning: unused variable: `i`
   --> src/terminal/mod.rs:494:14
    |
494 |         for (i, seg) in segments.iter().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `text_escaped`
   --> src/terminal/mod.rs:501:17
    |
501 |             let text_escaped = text_preview
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_text_escaped`

warning: enum `TerminalEvent` is never used
  --> src/terminal/mod.rs:55:10
   |
55 | pub enum TerminalEvent {
   |          ^^^^^^^^^^^^^
   |
   = note: `TerminalEvent` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: fields `line`, `start_col`, and `end_col` are never read
  --> src/terminal/mod.rs:68:9
   |
64 | pub struct ColoredTextSegment {
   |            ------------------ fields in this struct
...
68 |     pub line: usize,
   |         ^^^^
69 |     pub start_col: usize,
   |         ^^^^^^^^^
70 |     pub end_col: usize,
   |         ^^^^^^^
   |
   = note: `ColoredTextSegment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `total_lines` and `total_cols` are never read
  --> src/terminal/mod.rs:84:9
   |
80 | pub struct ColoredTerminalContent {
   |            ---------------------- fields in this struct
...
84 |     pub total_lines: usize,
   |         ^^^^^^^^^^^
85 |     pub total_cols: usize,
   |         ^^^^^^^^^^
   |
   = note: `ColoredTerminalContent` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `title` and `content` are never read
   --> src/terminal/mod.rs:147:9
    |
145 | pub struct TerminalSession {
    |            --------------- fields in this struct
146 |     pub id: SessionId,
147 |     pub title: String,
    |         ^^^^^
...
151 |     pub content: Arc<Mutex<String>>, // UI 렌더링용 콘텐츠
    |         ^^^^^^^

warning: methods `extract_terminal_text`, `get_content`, and `is_alive` are never used
   --> src/terminal/mod.rs:292:12
    |
157 | impl TerminalSession {
    | -------------------- methods in this implementation
...
292 |     pub fn extract_terminal_text(&mut self) -> String {
    |            ^^^^^^^^^^^^^^^^^^^^^
...
555 |     pub async fn get_content(&self) -> String {
    |                  ^^^^^^^^^^^
...
559 |     pub async fn is_alive(&self) -> bool {
    |                  ^^^^^^^^

warning: multiple methods are never used
   --> src/terminal/mod.rs:596:12
    |
583 | impl TerminalManager {
    | -------------------- methods in this implementation
...
596 |     pub fn set_ui_update_callback(&mut self, callback: UIUpdateCallback) {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
604 |     pub async fn process_pty_event(&mut self, session_id: SessionId, event: Event) {
    |                  ^^^^^^^^^^^^^^^^^
...
649 |     pub fn process_pty_event_sync(&self, session_id: SessionId, event: Event) {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
696 |     pub fn update_session_content_and_get(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
720 |     pub fn extract_session_terminal_text(&mut self, session_id: SessionId) -> Option<String> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
764 |     pub fn get_session(&self, session_id: SessionId) -> Option<&TerminalSession> {
    |            ^^^^^^^^^^^
...
768 |     pub fn get_session_mut(&mut self, session_id: SessionId) -> Option<&mut TerminalSession> {
    |            ^^^^^^^^^^^^^^^
...
799 |     pub fn get_all_sessions(&self) -> Vec<SessionId> {
    |            ^^^^^^^^^^^^^^^^
...
821 |     pub async fn get_terminal_content(&self, session_id: SessionId) -> Option<String> {
    |                  ^^^^^^^^^^^^^^^^^^^^
...
829 |     pub async fn cleanup_dead_sessions(&mut self) {
    |                  ^^^^^^^^^^^^^^^^^^^^^

warning: field `session_id` is never read
  --> src/ui/mod.rs:95:9
   |
94 |     SessionClosed {
   |     ------------- field in this variant
95 |         session_id: SessionId,
   |         ^^^^^^^^^^
   |
   = note: `UIUpdateMessage` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variant `ColoredTerminalContent` is never constructed
  --> src/ui/mod.rs:90:5
   |
89 | pub enum UIUpdateMessage {
   |          --------------- variant in this enum
90 |     ColoredTerminalContent {
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `UIUpdateMessage` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `ui_update_receiver` is never read
   --> src/ui/mod.rs:103:5
    |
99  | pub struct UIManager {
    |            --------- field in this struct
...
103 |     ui_update_receiver: Option<mpsc::Receiver<UIUpdateMessage>>,
    |     ^^^^^^^^^^^^^^^^^^

warning: associated items `render_colored_segments`, `setup_ui_update_callback`, `handle_backspace_key`, `handle_enter_key`, and `handle_space_key` are never used
   --> src/ui/mod.rs:125:8
    |
108 | impl UIManager {
    | -------------- associated items in this implementation
...
125 |     fn render_colored_segments(segments: &[crate::terminal::ColoredTextSegment]) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
...
610 |     async fn setup_ui_update_callback(&self) -> Result<()> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
...
741 |     fn handle_backspace_key(
    |        ^^^^^^^^^^^^^^^^^^^^
...
782 |     fn handle_enter_key(
    |        ^^^^^^^^^^^^^^^^
...
820 |     fn handle_space_key(
    |        ^^^^^^^^^^^^^^^^

warning: function `get_app_data_dir` is never used
  --> src/utils/mod.rs:14:8
   |
14 | pub fn get_app_data_dir() -> Result<PathBuf> {
   |        ^^^^^^^^^^^^^^^^

warning: function `get_log_file_path` is never used
  --> src/utils/mod.rs:22:8
   |
22 | pub fn get_log_file_path() -> Result<PathBuf> {
   |        ^^^^^^^^^^^^^^^^^

warning: function `is_valid_color` is never used
  --> src/utils/mod.rs:28:8
   |
28 | pub fn is_valid_color(color: &str) -> bool {
   |        ^^^^^^^^^^^^^^

warning: function `format_bytes` is never used
  --> src/utils/mod.rs:33:8
   |
33 | pub fn format_bytes(bytes: u64) -> String {
   |        ^^^^^^^^^^^^

warning: function `is_valid_utf8` is never used
  --> src/utils/mod.rs:57:8
   |
57 | pub fn is_valid_utf8(bytes: &[u8]) -> bool {
   |        ^^^^^^^^^^^^^

warning: function `safe_truncate` is never used
  --> src/utils/mod.rs:62:8
   |
62 | pub fn safe_truncate(s: &str, max_len: usize) -> &str {
   |        ^^^^^^^^^^^^^

warning: associated items `to_hex`, `to_slint_color`, and `from_slint_color` are never used
  --> src/utils/color.rs:35:12
   |
12 | impl Color {
   | ---------- associated items in this implementation
...
35 |     pub fn to_hex(&self) -> String {
   |            ^^^^^^
...
39 |     pub fn to_slint_color(&self) -> slint::Color {
   |            ^^^^^^^^^^^^^^
...
43 |     pub fn from_slint_color(color: slint::Color) -> Self {
   |            ^^^^^^^^^^^^^^^^

warning: field `selection` is never read
  --> src/utils/color.rs:64:9
   |
60 | pub struct ColorTheme {
   |            ---------- field in this struct
...
64 |     pub selection: Color,
   |         ^^^^^^^^^

warning: associated function `light_theme` is never used
   --> src/utils/color.rs:115:12
    |
89  | impl ColorTheme {
    | --------------- associated function in this implementation
...
115 |     pub fn light_theme() -> Self {
    |            ^^^^^^^^^^^

warning: field `baseline` is never read
 --> src/utils/font.rs:8:9
  |
5 | pub struct FontMetrics {
  |            ----------- field in this struct
...
8 |     pub baseline: i32,    // 베이스라인 오프셋
  |         ^^^^^^^^
  |
  = note: `FontMetrics` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `family`, `size`, `bold`, and `italic` are never read
  --> src/utils/font.rs:38:9
   |
37 | pub struct FontConfig {
   |            ---------- fields in this struct
38 |     pub family: String,
   |         ^^^^^^
39 |     pub size: f32,
   |         ^^^^
40 |     pub bold: bool,
   |         ^^^^
41 |     pub italic: bool,
   |         ^^^^^^
   |
   = note: `FontConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: associated items `new`, `with_bold`, `with_italic`, `calculate_char_dimensions`, and `is_monospace` are never used
  --> src/utils/font.rs:56:12
   |
55 | impl FontConfig {
   | --------------- associated items in this implementation
56 |     pub fn new(family: String, size: f32) -> Self {
   |            ^^^
...
65 |     pub fn with_bold(mut self, bold: bool) -> Self {
   |            ^^^^^^^^^
...
70 |     pub fn with_italic(mut self, italic: bool) -> Self {
   |            ^^^^^^^^^^^
...
75 |     pub fn calculate_char_dimensions(&self) -> (f32, f32) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^
...
83 |     pub fn is_monospace(&self) -> bool {
   |            ^^^^^^^^^^^^

warning: struct `FontManager` is never constructed
   --> src/utils/font.rs:101:12
    |
101 | pub struct FontManager;
    |            ^^^^^^^^^^^

warning: associated functions `get_available_fonts`, `is_font_available`, `get_default_font`, `validate_font_size`, and `scale_font_size` are never used
   --> src/utils/font.rs:104:12
    |
103 | impl FontManager {
    | ---------------- associated functions in this implementation
104 |     pub fn get_available_fonts() -> Vec<String> {
    |            ^^^^^^^^^^^^^^^^^^^
...
121 |     pub fn is_font_available(font_name: &str) -> bool {
    |            ^^^^^^^^^^^^^^^^^
...
127 |     pub fn get_default_font() -> FontConfig {
    |            ^^^^^^^^^^^^^^^^
...
138 |     pub fn validate_font_size(size: f32) -> Result<f32> {
    |            ^^^^^^^^^^^^^^^^^^
...
149 |     pub fn scale_font_size(current_size: f32, scale_factor: f32) -> f32 {
    |            ^^^^^^^^^^^^^^^

warning: variant `Bold` is never constructed
   --> src/utils/font.rs:158:5
    |
156 | pub enum FontWeight {
    |          ---------- variant in this enum
157 |     Normal,
158 |     Bold,
    |     ^^^^
    |
    = note: `FontWeight` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variant `Italic` is never constructed
   --> src/utils/font.rs:164:5
    |
162 | pub enum FontStyle {
    |          --------- variant in this enum
163 |     Normal,
164 |     Italic,
    |     ^^^^^^
    |
    = note: `FontStyle` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `weight`, `style`, `underline`, and `strikethrough` are never read
   --> src/utils/font.rs:169:9
    |
168 | pub struct TextAttributes {
    |            -------------- fields in this struct
169 |     pub weight: FontWeight,
    |         ^^^^^^
170 |     pub style: FontStyle,
    |         ^^^^^
171 |     pub underline: bool,
    |         ^^^^^^^^^
172 |     pub strikethrough: bool,
    |         ^^^^^^^^^^^^^
    |
    = note: `TextAttributes` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple associated items are never used
   --> src/utils/font.rs:187:12
    |
186 | impl TextAttributes {
    | ------------------- associated items in this implementation
187 |     pub fn new() -> Self {
    |            ^^^
...
191 |     pub fn with_weight(mut self, weight: FontWeight) -> Self {
    |            ^^^^^^^^^^^
...
196 |     pub fn with_style(mut self, style: FontStyle) -> Self {
    |            ^^^^^^^^^^
...
201 |     pub fn with_underline(mut self, underline: bool) -> Self {
    |            ^^^^^^^^^^^^^^
...
206 |     pub fn with_strikethrough(mut self, strikethrough: bool) -> Self {
    |            ^^^^^^^^^^^^^^^^^^
...
211 |     pub fn is_bold(&self) -> bool {
    |            ^^^^^^^
...
215 |     pub fn is_italic(&self) -> bool {
    |            ^^^^^^^^^

warning: method `remove_terminal` is never used
  --> src/utils/korean_ime.rs:74:12
   |
61 | impl KoreanIME {
   | -------------- method in this implementation
...
74 |     pub fn remove_terminal(&mut self, terminal_id: usize) {
   |            ^^^^^^^^^^^^^^^

warning: multiple associated functions are never used
  --> src/utils/platform.rs:10:12
   |
8  | impl Platform {
   | ------------- associated functions in this implementation
9  |     /// 현재 플랫폼의 이름을 반환합니다.
10 |     pub fn name() -> &'static str {
   |            ^^^^
...
23 |     pub fn default_shell() -> String {
   |            ^^^^^^^^^^^^^
...
34 |     pub fn config_dir() -> Result<PathBuf> {
   |            ^^^^^^^^^^
...
43 |     pub fn data_dir() -> Result<PathBuf> {
   |            ^^^^^^^^
...
52 |     pub fn cache_dir() -> Result<PathBuf> {
   |            ^^^^^^^^^
...
87 |     pub fn show_notification(title: &str, message: &str) -> Result<()> {
   |            ^^^^^^^^^^^^^^^^^
...
99 |     pub fn is_dark_mode() -> bool {
   |            ^^^^^^^^^^^^

warning: struct `SystemInfo` is never constructed
   --> src/utils/platform.rs:166:12
    |
166 | pub struct SystemInfo {
    |            ^^^^^^^^^^

warning: associated functions `new`, `get_os_version`, `get_kernel_version`, `get_hostname`, and `get_username` are never used
   --> src/utils/platform.rs:175:12
    |
174 | impl SystemInfo {
    | --------------- associated functions in this implementation
175 |     pub fn new() -> Result<Self> {
    |            ^^^
...
185 |     fn get_os_version() -> Result<String> {
    |        ^^^^^^^^^^^^^^
...
203 |     fn get_kernel_version() -> Result<String> {
    |        ^^^^^^^^^^^^^^^^^^
...
213 |     fn get_hostname() -> Result<String> {
    |        ^^^^^^^^^^^^
...
226 |     fn get_username() -> Result<String> {
    |        ^^^^^^^^^^^^

warning: function `show_notification` is never used
   --> src/utils/platform.rs:137:12
    |
137 |     pub fn show_notification(title: &str, message: &str) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^

warning: function `is_dark_mode` is never used
   --> src/utils/platform.rs:149:12
    |
149 |     pub fn is_dark_mode() -> bool {
    |            ^^^^^^^^^^^^

warning: `sterm` (bin "sterm") generated 45 warnings (run `cargo fix --bin "sterm"` to apply 5 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s
     Running `target/debug/sterm`
other event: Title(xiphoid@NE13236mac:~/git/sterm)
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: true, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: a }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: b }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: c }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(abc)
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: true, meta: false, shift: false }, repeat: false, text:  }
2025-08-21 11:06:19.149 sterm[47847:4708691] error messaging the mach port for IMKCFRunLoopWakeUpReliable
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅏ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅕ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: . }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅏ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅕ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:   }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: true, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅏ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: [ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title([아)
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅏ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: [ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title([안)
other event: Title(xiphoid@NE13236mac:~/git/sterm)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅏ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Bell
other event: Title(??)
other event: Title(xiphoid@NE13236mac:~/git/sterm/ui)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(xiphoid@NE13236mac:~/git/sterm/ui)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(xiphoid@NE13236mac:~/git/sterm/ui)
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㄴ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:   }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: true, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: l }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: s }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:   }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: - }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: l }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: 
 }
other event: Title(ls -G -l)
other event: Title(xiphoid@NE13236mac:~/git/sterm/ui)
{ modifiers: { alt: false, control: true, meta: false, shift: false }, repeat: false, text:  }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text: ㅇ }
{ modifiers: { alt: false, control: false, meta: false, shift: false }, repeat: false, text:   }
