import { Button, VerticalBox, HorizontalBox, TextEdit, ScrollView, LineEdit } from "std-widgets.slint";

export struct TerminalState {
    content: string,
    cursor_x: int,
    cursor_y: int,
    font_size: int,
    background_color: color,
    foreground_color: color,
    composition_text: string,
}

export struct TabInfo {
    title: string,
    active: bool,
    id: int,
}

export component TabBar inherits Rectangle {
    in-out property <[TabInfo]> tabs: [];
    in-out property <int> active_tab: 0;
    
    callback tab_clicked(int);
    callback new_tab_clicked();
    callback close_tab_clicked(int);
    
    background: #2b2b2b;
    height: 32px;
    
    HorizontalBox {
        spacing: 2px;
        padding: 4px;
        
        for tab[index] in tabs: Rectangle {
            width: 150px;
            height: 24px;
            background: tab.active ? #404040 : #353535;
            border-radius: 4px;
            
            HorizontalBox {
                padding: 4px;
                spacing: 8px;
                
                Text {
                    text: tab.title;
                    color: tab.active ? white : #cccccc;
                    font-size: 12px;
                    vertical-alignment: center;
                    overflow: elide;
                }
                
                Button {
                    text: "×";
                    width: 16px;
                    height: 16px;
                    clicked => {
                        close_tab_clicked(tab.id);
                    }
                }
            }
            
            TouchArea {
                clicked => {
                    tab_clicked(tab.id);
                }
            }
        }
        
        Button {
            text: "+";
            width: 24px;
            height: 24px;
            clicked => {
                new_tab_clicked();
            }
        }
    }
}

// 키보드 수정자 키 구조체
export struct KeyboardModifiers {
    alt: bool,
    control: bool,
    meta: bool,
    shift: bool,
}

// 키보드 이벤트 구조체 (Slint 기본 KeyEvent와 호환)
export struct TerminalKeyEvent {
    text: string,
    modifiers: KeyboardModifiers,
    repeat: bool,
}

// 색상 세그먼트 구조체
export struct ColorSegment {
    text: string,
    fg_r: int,
    fg_g: int,
    fg_b: int,
    bg_r: int,
    bg_g: int,
    bg_b: int,
    x: int,      // Rust에서 계산된 절대 X 위치 (픽셀)
    y: int,      // Rust에서 계산된 절대 Y 위치 (픽셀)
    width: int,  // Rust에서 계산된 폭 (픽셀)
    height: int, // Rust에서 계산된 높이 (픽셀)
}

export struct CursorInfo {
    x: int,      // Rust에서 계산된 커서 X 위치 (픽셀)
    y: int,      // Rust에서 계산된 커서 Y 위치 (픽셀)
    width: int,  // 커서 폭 (픽셀)
    height: int, // 커서 높이 (픽셀)
    visible: bool, // 커서 가시성
}

export component TerminalView inherits Rectangle {
    in-out property <TerminalState> state;
    in-out property <string> terminal_content: "";
    in-out property <[ColorSegment]> color_segments: [];
    in-out property <CursorInfo> cursor_info: { x: 0, y: 0, width: 8, height: 16, visible: true };
    in-out property <bool> has_selection: false;
    in-out property <string> selected_text: "";
    
    callback terminal_input(TerminalKeyEvent);
    callback terminal_resize(int, int);
    callback copy_selected();
    callback paste_clipboard();
    
    background: state.background_color;
    
    ScrollView {
        viewport-width: parent.width;
        viewport-height: parent.height;        
        Rectangle {
            width: 100%;
            height: max(self.preferred-height, parent.visible-height);
            
            // 선택 영역 배경 (텍스트 뒤에 렌더링)
            if has_selection: Rectangle {
                // 간단한 선택 영역 표시 (실제로는 더 복잡한 계산 필요)
                x: 8px;
                y: 8px;
                width: 200px; // 임시 크기
                height: state.font_size * 1px;
                background: #4a90e2;
                opacity: 0.3;
            }
            
            // 기본 터미널 내용 표시 (색상 세그먼트가 없을 때만)
            
            
            // 색상 세그먼트들을 배경색과 함께 렌더링 (Rust에서 계산된 위치 사용)
            for segment[i] in color_segments: Rectangle {
                x: segment.x * 1px;      // Rust에서 계산된 절대 X 위치
                y: segment.y * 1px;      // Rust에서 계산된 절대 Y 위치
                width: segment.width * 1px;  // Rust에서 계산된 폭
                height: segment.height * 1px; // Rust에서 계산된 높이
                background: rgb(segment.bg_r, segment.bg_g, segment.bg_b);
                
                Text {
                    text: segment.text;
                    color: rgb(segment.fg_r, segment.fg_g, segment.fg_b);
                    font-family: "D2Coding";
                    font-size: state.font_size * 1px;
                    x: 0;
                    y: 0;
                    width: parent.width;
                    height: parent.height;
                    wrap: no-wrap;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                }
            }
            
            // 한글 조합 중인 텍스트 표시 (composition text)
            if state.composition_text != "": Rectangle {
                x: cursor_info.x * 1px;
                y: cursor_info.y * 1px;
                width: cursor_info.width * 2px;   // Rust에서 계산된 폭
                height: state.font_size * 1px;
                background: rgba(255, 255, 0, 0.3); // 노란색 배경
                
                Text {
                    text: state.composition_text;
                    color: black;
                    font-family: "D2Coding";
                    font-size: state.font_size * 1px;
                    x: 0;
                    y: 0;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                }
            }
            
            // Cursor (Rust에서 계산된 위치 사용) - 조합 중이 아닐 때만 표시
            if cursor_info.visible && state.composition_text == "": Rectangle {
                x: cursor_info.x * 1px;      // Rust에서 계산된 절대 X 위치
                y: cursor_info.y * 1px;      // Rust에서 계산된 절대 Y 위치
                width: cursor_info.width * 1px;   // Rust에서 계산된 폭
                height: cursor_info.height * 1px; // Rust에서 계산된 높이
                background: white;
                opacity: 0.8;
                
                animate opacity {
                    duration: 500ms;
                    iteration-count: -1;
                }
            }
        }
    }
    
    // 키보드 입력을 받기 위한 포커스 가능한 Rectangle
    terminal_focus := FocusScope {
        x: 0;
        y: 0;
        width: 100%;
        height: 100%;
        
        key-pressed(event) => {
            // 모든 키 이벤트를 Rust로 전달 (Rust에서 필터링 처리)
            debug(event);
            
            // ESC 키 특별 디버그
            if (event.text == "\u{1b}") {
                debug("ESC key detected in Slint UI! - CALLING terminal_input");
            }
            
            // 모든 키 이벤트를 Rust로 전달
            terminal_input({
                text: event.text,
                modifiers: { 
                    alt: event.modifiers.alt,
                    control: event.modifiers.control,
                    meta: event.modifiers.meta,
                    shift: event.modifiers.shift,
                },
                repeat: event.repeat,
            });
            accept
        }
        
        key-released(event) => {
            // ESC 키 릴리즈에서는 처리하지 않음 (중복 방지)
            if (event.text == "\u{1b}") {
                debug("ESC key released in Slint UI! - NOT sending to avoid duplicates");
            }
            accept
        }
    }
    
    TouchArea {
        width: 100%;
        height: 100%;
        
        property <bool> is_selecting: false;
        property <float> selection_start_x: 0;
        property <float> selection_start_y: 0;
        property <float> current_x: 0;
        property <float> current_y: 0;
        
        // 마우스 누름 - 키보드 입력에 포커스 설정
        clicked => {
            // 단순 클릭으로는 선택 해제
            has_selection = false;
            // 터미널 키보드 입력에 포커스 설정
            terminal_focus.focus();
        }
        
        // 더블클릭으로 단어 선택
        double-clicked => {
            has_selection = true;
            selected_text = "word selection placeholder";
            copy_selected();
        }
        
        // 마우스 드래그로 텍스트 선택 (단순화)
        moved => {
            // 나중에 실제 드래그 선택 구현
        }
    }
}

export component MainWindow inherits Window {
    title: "STerm";
    preferred-width: 1000px;
    preferred-height: 700px;
    min-width: 600px;
    min-height: 400px;
    max-width: 2400px;
    max-height: 1800px;
    background: #1e1e1e;
    
    // 윈도우 크기 추적용 프로퍼티
    property <length> current_width: self.width;
    property <length> current_height: self.height;
    
    in-out property <[TabInfo]> tabs: [
        { title: "Terminal", active: true, id: 0 }
    ];
    in-out property <int> active_tab: 0;
    in-out property <TerminalState> terminal_state: {
        content: "",
        cursor_x: 0,
        cursor_y: 0,
        font_size: 11,
        background_color: #1e1e1e,
        foreground_color: #ffffff,
    };
    in-out property <string> terminal_content: "Welcome to STerm!\n$ ";
    in-out property <[ColorSegment]> color_segments: [];
    in-out property <CursorInfo> cursor_info: { x: 8, y: 8, width: 8, height: 16, visible: true };
    
    callback tab_clicked(int);
    callback new_tab_clicked();
    callback close_tab_clicked(int);
    callback terminal_input(TerminalKeyEvent);
    callback window_resized(int, int);
    callback copy_selected();
    callback paste_clipboard();
    
    VerticalBox {
        spacing: 0px;
        
        TabBar {
            tabs: tabs;
            active_tab: active_tab;
            
            tab_clicked(id) => {
                tab_clicked(id);
            }
            
            new_tab_clicked() => {
                new_tab_clicked();
            }
            
            close_tab_clicked(id) => {
                close_tab_clicked(id);
            }
        }
        
        terminal_view := TerminalView {
            state: terminal_state;
            terminal_content: terminal_content;
            color_segments: color_segments;
            cursor_info: cursor_info;
            
            terminal_input(event) => {
                terminal_input(event);
            }
            
            terminal_resize(width, height) => {
                window_resized(width, height);
            }
            
            copy_selected() => {
                copy_selected();
            }
            
            paste_clipboard() => {
                paste_clipboard();
            }
        }
    }
    
    // 윈도우 크기 변경 감지 및 콜백 호출
    changed current_width => {
        window_resized(current_width / 1px, current_height / 1px);
    }
    
    changed current_height => {
        window_resized(current_width / 1px, current_height / 1px);
    }
}
